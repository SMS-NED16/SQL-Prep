/*
	Attempting to do manual calculations using built-in functions
	while also using GROUP BYs on a breed-basis
*/
SELECT breed, COUNT(*), AVG(age), MIN(age), MAX(age), 
	(MAX(age) - MIN(age)) AS age_range,

	/* mean age as percentage of age range - percentile */
	(AVG(age) - MIN(age))/(MAX(age) - MIN(age)) * 100 AS mean_pcent
FROM pet
GROUP BY breed;

/*
	Creating a new column for the number of live pets
*/
SELECT breed, COUNT(*), SUM(dead) AS pets_dead, COUNT(*) - SUM(dead) AS pets_alive
FROM pet
GROUP BY breed;

/* Attempting to find counts of persons with first names of the same length */
/* First create a new column for first_name_length*/
ALTER TABLE person ADD COLUMN first_name_length INTEGER;
UPDATE TABLE person SET name_length = LENGTH(first);
SELECT first_name_length, COUNT(*) 
	FROM person 
	GROUP BY first_name_length 
	ORDER BY first_name_length;

/* Alternatively, can just use a call to the `length` function in the GROUP BY clause*/
SELECT length(first), COUNT(*) FROM person GROUP BY length(first);

/* Comparing if rounded SQLite avg age and manual avg age are same */
SELECT breed, min(age) AS min_age, max(age) AS max_age, 
	max(age) - min(age) AS range,
	round(avg(age)) AS rounded_age, 
	sum(age) / COUNT(*) AS calc_age
FROM pet
GROUP BY breed;

/*
	Experimenting with random age generation UPDATE statements.
	Multiple UPDATE statements with different denominators for the random() call
	will obviously update the average age, because they will increase the range of 
	values that the randomly generated age can take.
*/
BEGIN TRANSACTION;

UPDATE pet SET age = abs(random() % 50) WHERE dead = 0;
SELECT round(avg(age)) AS avg_age_50 FROM pet;

UPDATE pet SET age = abs(random() % 25) WHERE dead = 0;
SELECT round(avg(age)) AS avg_age_25  FROM pet;

UPDATE pet SET age = abs(random() % 75) WHERE dead = 0;
SELECT round(avg(age)) AS avg_age_75 FROM pet;

ROLLBACK TRANSACTION;

/*
	However, if we execute the same UPDATE statement multiple times,
	we find that the average age doesn't change substantially because 
	the pseudorandom numbers generated by SQLite aren't super random.
*/
BEGIN TRANSACTION;

UPDATE pet SET age = abs(random() % 20) WHERE dead = 0;
SELECT round(avg(age)) AS avg_age_1 FROM pet;

UPDATE pet SET age = abs(random() % 20) WHERE dead = 0;
SELECT round(avg(age)) AS avg_age_2  FROM pet;

UPDATE pet SET age = abs(random() % 20) WHERE dead = 0;
SELECT round(avg(age)) AS avg_age_3 FROM pet;

UPDATE pet SET age = abs(random() % 20) WHERE dead = 0;
SELECT round(avg(age)) AS avg_age_4 FROM pet;

UPDATE pet SET age = abs(random() % 20) WHERE dead = 0;
SELECT round(avg(age)) AS avg_age_5 FROM pet;

UPDATE pet SET age = abs(random() % 20) WHERE dead = 0;
SELECT round(avg(age)) AS avg_age_6 FROM pet;

UPDATE pet SET age = abs(random() % 20) WHERE dead = 0;
SELECT round(avg(age)) AS avg_age_7 FROM pet;

ROLLBACK TRANSACTION;

/* Indeed, average age was almost always 9 or 10.*/